{"version":3,"file":"static/js/236.bc8b3a87.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@mui/icons-material/AssignmentInd.js"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport {\n  Box,\n  TextField,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  Grid,\n  Paper,\n  Avatar,\n  Typography,\n  Button,\n  FormHelperText,\n} from '@mui/material';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport AssignmentIndIcon from '@mui/icons-material/AssignmentInd';\nimport { register } from 'redux/auth/authOperations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  // useState for show password\n  const [values, setValues] = useState({\n    amount: '',\n    password: '',\n    weight: '',\n    weightRange: '',\n    showPassword: false,\n  });\n\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  // Formik\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (value, actions) => {\n    const body = {\n      name: value.name,\n      email: value.email,\n      password: value.password,\n    };\n\n    dispatch(register(body));\n\n    actions.resetForm();\n    setValues({ ...values, password: '' });\n  };\n\n  // Show password\n  const handleChange = prop => event => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword,\n    });\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      <Grid\n        item\n        xs={12}\n        sm={8}\n        md={5}\n        component={Paper}\n        elevation={6}\n        square\n        sx={{ mt: 20 }}\n      >\n        <Box\n          sx={{\n            py: 8,\n            px: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'green' }}>\n            <AssignmentIndIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 4 }}>\n            Reqistration\n          </Typography>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={yup.object().shape({\n              name: yup\n                .string()\n                .required('Please enter name')\n                .min(2, 'Name too short'),\n              email: yup\n                .string()\n                .required('Please enter email')\n                .email('Invalid email'),\n              password: yup\n                .string()\n                .required('Please enter password')\n                .min(7, 'Password should be minimum 7 characters long'),\n            })}\n            onSubmit={handleSubmit}\n          >\n            {({ errors, isValid, touched, dirty }) => (\n              <Form autoComplete=\"off\">\n                <Field\n                  as={TextField}\n                  fullWidth\n                  id={nameInputId}\n                  label=\"Name\"\n                  variant=\"outlined\"\n                  name=\"name\"\n                  placeholder=\"Jane\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  required\n                  error={Boolean(errors.name) && Boolean(touched.name)}\n                  helperText={Boolean(touched.name) && errors.name}\n                />\n                <Field\n                  as={TextField}\n                  sx={{ mt: '20px' }}\n                  fullWidth\n                  id={emailInputId}\n                  label=\"Email\"\n                  variant=\"outlined\"\n                  name=\"email\"\n                  placeholder=\"jane@acme.com\"\n                  type=\"email\"\n                  autoComplete=\"off\"\n                  required\n                  error={Boolean(errors.email) && Boolean(touched.email)}\n                  helperText={Boolean(touched.email) && errors.email}\n                />\n                <Field\n                  as={FormControl}\n                  fullWidth\n                  sx={{ mt: '20px' }}\n                  error={Boolean(errors.password) && Boolean(touched.password)}\n                  helpertext={touched.password && errors.password}\n                >\n                  <InputLabel htmlFor={passwordInputId} required>\n                    Password\n                  </InputLabel>\n                  <OutlinedInput\n                    id={passwordInputId}\n                    type={values.showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    onChange={handleChange('password')}\n                    autoComplete=\"current-password\"\n                    aria-describedby=\"component-error-text\"\n                    required\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                        >\n                          {values.showPassword ? (\n                            <VisibilityOff />\n                          ) : (\n                            <Visibility />\n                          )}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    label=\"Password\"\n                  />\n                  {errors.password && (\n                    <FormHelperText id=\"component-error-text\">\n                      {errors.password}\n                    </FormHelperText>\n                  )}\n                </Field>\n\n                <Button\n                  fullWidth\n                  type=\"submit\"\n                  variant=\"contained\"\n                  sx={{ mt: '40px' }}\n                  disabled={!dirty || !isValid}\n                >\n                  Register\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Grid>\n    </>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { Grid } from '@mui/material';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <Grid container component=\"main\" sx={{ justifyContent: 'space-around' }}>\n      <HelmetProvider>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n      </HelmetProvider>\n      <RegisterForm />\n    </Grid>\n  );\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z\"\n}), 'AssignmentInd');\n\nexports.default = _default;"],"names":["RegisterForm","dispatch","useDispatch","useState","amount","password","weight","weightRange","showPassword","values","setValues","nameInputId","nanoid","emailInputId","passwordInputId","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","Grid","item","xs","sm","md","component","Paper","elevation","square","sx","mt","Box","py","px","display","flexDirection","alignItems","Avatar","m","bgcolor","AssignmentInd","Typography","variant","mb","initialValues","name","email","validationSchema","yup","shape","required","min","onSubmit","value","actions","body","register","resetForm","prop","errors","isValid","touched","dirty","autoComplete","as","TextField","fullWidth","id","label","placeholder","type","error","Boolean","helperText","FormControl","helpertext","InputLabel","htmlFor","OutlinedInput","onChange","target","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","Button","disabled","Register","container","justifyContent","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}