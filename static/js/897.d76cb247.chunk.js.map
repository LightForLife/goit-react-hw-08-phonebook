{"version":3,"file":"static/js/897.d76cb247.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Validation/Validation.styled.jsx","components/Validation/Validation.jsx","components/FormContacts/Form.styled.jsx","components/FormContacts/Form.jsx","components/ItemContacts/ItemContacts.styled.jsx","components/ItemContacts/ItemContacts.jsx","redux/filter/selectors.js","components/ListContacts/ListContacts.jsx","components/FilterSearch/FilterSearch.styled.jsx","components/FilterSearch/FilterSearch.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx","components/Loader/Spinner.styled.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  width: 240px;\n  display: block;\n  color: red; ;\n`;\n","import { ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { ErrorText } from './Validation.styled';\n\nconst nameRules = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRules =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nexport const schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Too Short!')\n    .max(24, 'Too Long!')\n    .matches(nameRules, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    })\n    .required('Name is a required field'),\n  number: yup\n    .string()\n    .matches(numberRules, {\n      message:\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n    })\n    .required('Number is a required field'),\n});\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormBox = styled(Form)`\n  margin-bottom: 70px;\n`;\n\nexport const FormContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding: 10px;\n  justify-items: center;\n  align-items: stretch;\n  margin-bottom: 30px;\n`;\n\nexport const FormLabel = styled.label`\n  color: #fff;\n  margin-bottom: 4px;\n  text-align: center;\n  align-items: center;\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  margin-top: 5px;\n  border: none;\n  color: #fff;\n  border-radius: 5px;\n  font-size: 1.1em;\n  outline: none;\n  width: 250px;\n  background-color: rgba(255, 255, 255, 0.2);\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  padding: 6px 15px;\n`;\n\nexport const AddContactBtn = styled.button`\n  width: 200px;\n  height: 40px;\n  color: #fff;\n  background-color: #7a75a9;\n  border-radius: 5px;\n  padding: 10px 25px;\n  font-weight: 500;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  outline: none;\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const ErrorText = styled.p`\n  width: 240px;\n  display: block;\n  color: red; ;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport { FormError, schema } from 'components/Validation/Validation';\nimport {\n  FormBox,\n  AddContactBtn,\n  FormInput,\n  FormContainer,\n  FormLabel,\n} from './Form.styled';\n\nexport const ContactForm = () => {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (value, actions) => {\n    const findName = contacts.find(\n      contact => contact.name.toLowerCase() === value.name.toLowerCase()\n    );\n\n    if (findName) {\n      alert(`${value.name} is already in contacts`);\n      return;\n    }\n\n    const body = {\n      name: value.name,\n      number: value.number,\n    };\n\n    dispatch(addContact(body));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormBox autoComplete=\"off\">\n        <FormContainer>\n          <FormLabel htmlFor={nameInputId}>\n            Name\n            <FormInput type=\"text\" name=\"name\" id={nameInputId} />\n            <FormError name=\"name\" />\n          </FormLabel>\n\n          <FormLabel htmlFor={numberInputId}>\n            Number\n            <FormInput type=\"tel\" name=\"number\" id={numberInputId} />\n            <FormError name=\"number\" />\n          </FormLabel>\n        </FormContainer>\n        <AddContactBtn type=\"submit\">Add contact</AddContactBtn>\n      </FormBox>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ItemContact = styled.li`\n  border-radius: 4px;\n  position: relative;\n  background-color: rgba(255, 255, 255, 0.9);\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  background-image: url(http://www.transparenttextures.com/patterns/arches.png);\n  & + & {\n    margin-top: 30px;\n  }\n`;\n\nexport const NameContact = styled.span`\n  display: block;\n  font-size: 26px;\n  color: #1a7e76;\n  padding-top: 7px;\n  padding-bottom: 7px;\n  background-color: rgba(0, 0, 0, 0.1);\n`;\n\nexport const TelContact = styled.span`\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  font-size: 20px;\n`;\n\nexport const DeleteContactBtn = styled.button`\n  position: absolute;\n  padding: 5px;\n  top: 5px;\n  right: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    color: red;\n    scale: 1.1;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaUserTimes } from 'react-icons/fa';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ItemContact,\n  NameContact,\n  DeleteContactBtn,\n  TelContact,\n} from './ItemContacts.styled';\n\nexport const ItemContacts = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <ItemContact id={contact.id}>\n      <NameContact>\n        {contact.name}\n        <DeleteContactBtn onClick={handleDelete}>\n          <FaUserTimes size={18} />\n        </DeleteContactBtn>\n      </NameContact>\n      <TelContact>{contact.number}</TelContact>\n    </ItemContact>\n  );\n};\n\nItemContacts.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter.filterValue;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    // console.log('Calculating visible tasks. Now memoized!');\n\n    const constNormalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(constNormalizedFilter)\n    );\n  }\n);\n","import { useSelector } from 'react-redux';\nimport { ItemContacts } from 'components/ItemContacts/ItemContacts';\nimport { selectVisibleContacts } from 'redux/filter/selectors';\n\nexport const ListContacts = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ItemContacts key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterBox = styled.div`\n  margin-top: 10px;\n  margin-bottom: 40px;\n`;\n\nexport const LabelFilter = styled.label`\n  margin-right: 30px;\n  color: #fff;\n  font-size: 20px;\n`;\n\nexport const InputFilter = styled.input`\n  border: none;\n  height: 30px;\n  color: #fff;\n  border-radius: 5px;\n  font-size: 1.1em;\n  outline: none;\n  width: 250px;\n  background-color: rgba(255, 255, 255, 0.2);\n  padding: 5px 15px;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n`;\nexport const TiUserDelete = styled.svg``;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { LabelFilter, FilterBox, InputFilter } from './FilterSearch.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const searchText = e.target.value;\n    dispatch(filterContacts(searchText));\n  };\n\n  return (\n    <FilterBox>\n      <LabelFilter htmlFor=\"\">Find contacts by name</LabelFilter>\n      <InputFilter type=\"text\" onChange={handleChange} />\n    </FilterBox>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ErrorTitle = styled.h2`\n  color: red;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectError } from 'redux/contacts/selectors';\nimport { ErrorTitle } from './Error.styled';\n\nexport const Error = () => {\n  const errorValue = useSelector(selectError);\n  return <ErrorTitle>{errorValue} :(</ErrorTitle>;\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { LoaderWrapper } from './Spinner.styled';\n\nexport const Loader = () => {\n  const isLoading = useSelector(selectIsLoading);\n  return (\n    <LoaderWrapper>\n      <RotatingLines\n        strokeColor=\"#36d7b7\"\n        strokeWidth=\"4\"\n        animationDuration=\"0.75\"\n        width=\"58\"\n        visible={isLoading}\n      />\n    </LoaderWrapper>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/FormContacts/Form';\nimport { ListContacts } from 'components/ListContacts/ListContacts';\nimport { SearchTitle } from 'components/App.styled';\nimport { Filter } from 'components/FilterSearch/FilterSearch';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n\n      <SearchTitle>Contacts</SearchTitle>\n      <Filter />\n      {isLoading && !error && <Loader />}\n      {error && <Error />}\n      {!isLoading && <ListContacts />}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","ErrorText","styled","schema","yup","shape","name","min","max","matches","message","required","number","FormError","render","FormBox","Form","FormContainer","FormLabel","FormInput","Field","AddContactBtn","ContactForm","nameInputId","nanoid","numberInputId","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","value","actions","find","contact","toLowerCase","alert","body","addContact","resetForm","autoComplete","htmlFor","type","id","ItemContact","NameContact","TelContact","DeleteContactBtn","ItemContacts","onClick","deleteContact","size","selectVisibleContacts","createSelector","filter","filterValue","constNormalizedFilter","includes","ListContacts","map","FilterBox","LabelFilter","InputFilter","Filter","onChange","e","searchText","target","filterContacts","ErrorTitle","Error","errorValue","LoaderWrapper","Loader","strokeColor","strokeWidth","animationDuration","width","visible","Contacts","useEffect","fetchContacts"],"sourceRoot":""}